<%= article do %>
  <%= render layout: "header", locals: { title: "An async combobox" } do %>
    <div>
      <%= combobox_tag "state", states_path, id: "state-box" %>
    </div>
  <% end %>

  <%= content do %>
    <%= paragraph do %>
      Async comboboxes are useful because no time is spent loading all the options
      before the page is rendered. Instead, options are fetched when the combobox is first opened.
      You might reach for one of these when you're filtering a large dataset.

      <%= sp %>
      They have some requirements that inline comboboxes don't. For starters,
      they need an <%= mono("id") %>.

      <%= sp %>
      If you're using the provided form helper (like in the YouTube example), the <%= mono("id") %>
      is determined automatically. If not, you'll need to provide it manually.
      Note that this <%= mono("id") %> is always available in the combobox's
      <%= mono("data-async-id") %> attribute for easy access, in case you forget it!

      <%= sp %>
      Async comboboxes also require you to do the filtering server-side. Whenever the user types
      into the input, the combobox will perform a debounced request to your server
      to the url or path you provided. The user's input will be sent as a
      param accessible via <%= mono("params[:q]") %>.

      <%= sp %>
      Finally, you'll have to provide the options via the
      gem's <%= mono("#async_combobox_options") %> helper. And this needs to happen
      in a <%= mono("*.turbo_stream.erb") %> template.

      <%= sp %>
      Here's what that might look like:
    <% end %>

    <%=
      highlight_erb(%(
        &lt;%= combobox_tag "state", states_path, id: "state-box" %&gt;
      ), "In your template")
    %>

    <%=
      highlight_rb(%(
        class StatesController &lt; ApplicationController
          def index
            @states = State.search params[:q]
          end
        end
      ), "In your controller")
    %>

    <%=
      highlight_erb(%(
        &lt;%= async_combobox_options @states, for_id: "state-box" %&gt;
      ), "In views/states/index.turbo_stream.erb")
    %>

    <%= paragraph do %>
      You can optionally paginate the options. Simply pass the next page number as
      <%= mono(":next_page") %> to <%= mono("#async_combobox_options") %>.
      When the user scrolls down far enough,
      the combobox will automatically request that page number in a param accessible via
      <%= mono("params[:page]") %> to the same url or path you provided.
    <% end %>

    <%= emphasis do %>
      It's very important that you pass <%= mono("nil") %> to <%= mono(":next_page") %>
      for the last page. Otherwise, the combobox will keep requesting more pages indefinitely and
      will overwhelm your server.
    <% end %>

    <%=
      highlight_erb(%(
        &lt;%# This is using geared_pagination syntax %&gt;
        &lt;%= async_combobox_options @page.records,
              for_id: "state-box",
              next_page: @page.last? ? nil : @page.next_param %&gt;
      ), "In views/states/index.turbo_stream.erb")
    %>
  <% end %>
<% end %>
