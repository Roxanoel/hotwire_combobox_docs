<%= article do %>
  <%= render layout: "header", locals: { title: "Styling" } do %>
    <div class="youtube">
      <%= form_with url: search_url do |form| %>
        <%= form.combobox :search, [] %>
      <% end %>
    </div>
  <% end %>

  <%= content do %>
    <%= paragraph do %>
      We've come full circle to the original YouTube-style combobox.
      But this time, let's talk about styling.

      <%= sp %>
      You can opt-in to the default styles by including the gem's CSS file in your document's head.
      You do that by placing the <%= mono("#combobox_style_tag") %> after your framework styles
      and before your application styles.
      You can pass any of the usual <%= mono("#stylesheet_link_tag") %> options to it.

      <%= sp %>
      Regardless of whether you've included the default styles,
      you always have full control over the combobox's appearance.
      Simply override these classes in your CSS:
    <% end %>

    <ul class="max-w-xl space-y-4 text-lg list-disc">
      <li><%= bold(".hw-combobox") %>: the fieldset container, wraps the whole component</li>
      <li><%= bold(".hw-combobox__input") %>: the field where the user inputs text</li>
      <li><%= bold(".hw-combobox__handle") %>: the chevron or downwards arrow</li>
      <li><%= bold(".hw-combobox__listbox") %>: the collapsible options container</li>
      <li><%= bold(".hw-combobox__option") %>: each individual option</li>
      <li><%= bold(".hw-combobox__option--selected") %>: the currently selected option</li>
      <li><%= bold(".hw-combobox__dialog") %>: contains the input, listbox, and options when on mobile mode</li>
      <li><%= bold(".hw-combobox__dialog__label") %>: optional label displayed on mobile mode</li>
      <li><%= bold(".hw-combobox__dialog__input") %>: mobile mode input</li>
      <li><%= bold(".hw-combobox__dialog__listbox") %>: mobile mode listbox</li>
    </ul>

    <%= paragraph do %>
      You can also override the CSS variables defined by the library.
      Look in the source code for the full list of variables.

      <%= sp %>
      Here's one way you could style the combobox to look like the YouTube example using Tailwind:
    <% end %>

    <%=
      highlight_css(%(
        .youtube {
          .hw-combobox__input {
            @apply sm:w-[35rem] rounded-full w-80;
          }
          .hw-combobox__handle {
            @apply right-3;
          }
          .hw-combobox__listbox {
            @apply rounded-2xl;
          }
          /* Optionally... */
          --hw-handle-image: url("data:image/svg+xml;charset=utf-8,/* encoded magnifying glass svg */");
        }
      ))
    %>
  <% end %>
<% end %>
